#stringtie_gtf_withrefasgeneid[str_detect(stringtie_gtf_withrefasgeneid$gene_id,"MSTRG") & !is.na(stringtie_gtf_withrefasgeneid$ref_gene_id),]$gene_id <- #stringtie_gtf_withrefasgeneid[str_detect(stringtie_gtf_withrefasgeneid$gene_id,"MSTRG") & !is.na(stringtie_gtf_withrefasgeneid$ref_gene_id),]$ref_gene_id
get_geneids_with_refids <- function(gr){
gr_ref_ids <- unique(gr[str_detect(gr$gene_id,"MSTRG") &
!is.na(gr$ref_gene_id),]$ref_gene_id)
return(unique(union(gr_ref_ids, gr$gene_id)))
}
stringtie_gene_ids_withref <- get_geneids_with_refids(stringtie_gtf)
lncRNAs_out_gene_ids_withref <-  get_geneids_with_refids(lncRNAs_out)
candidates_lncRNA_gene_ids_withref <- get_geneids_with_refids(candidates_lncRNA)
mRNAs_out_gene_ids_withref <- get_geneids_with_refids(mRNAs_out)
#length(stringtie_gtf_withrefasgeneid$gene_id)
# Just to double check it worked
#stringtie_gtf[str_detect(stringtie_gtf$gene_id,"MSTRG") & !is.na(stringtie_gtf$ref_gene_id),]$gene_id
#stringtie_gtf_withrefasgeneid[str_detect(stringtie_gtf_withrefasgeneid$gene_id,"MSTRG") & !is.na(stringtie_gtf_withrefasgeneid$ref_gene_id),]$gene_id
# Apply the same to the prediction
# lncRNAs_out_withrefasgeneid <- lncRNAs_out
# lncRNAs_out_withrefasgeneid[str_detect(lncRNAs_out_withrefasgeneid$gene_id,"MSTRG") & !is.na(lncRNAs_out_withrefasgeneid$ref_gene_id),]$gene_id <- #lncRNAs_out_withrefasgeneid[str_detect(lncRNAs_out_withrefasgeneid$gene_id,"MSTRG") & !is.na(lncRNAs_out_withrefasgeneid$ref_gene_id),]$ref_gene_id
#Check
#lncRNAs_out_withrefasgeneid[str_detect(lncRNAs_out_withrefasgeneid$gene_id,"MSTRG") & !is.na(lncRNAs_out_withrefasgeneid$ref_gene_id),]$gene_id
# Check for the ref
#lncRNAs_ref[str_detect(lncRNAs_ref$gene_id,"MSTRG") & !is.na(lncRNAs_ref$ref_gene_id),]$gene_id
#candidates_original <- candidates_lncRNA
#candidates_lncRNA[str_detect(candidates_lncRNA$gene_id,"MSTRG") & !is.na(candidates_lncRNA$ref_gene_id),]$gene_id <- candidates_lncRNA[str_detect(candidates_lncRNA$gene_id,"MSTRG") & #!is.na(candidates_lncRNA$ref_gene_id),]$ref_gene_id
#mRNAs_out[str_detect(mRNAs_out$gene_id,"MSTRG") & !is.na(mRNAs_out$ref_gene_id),]$gene_id <- mRNAs_out[str_detect(mRNAs_out$gene_id,"MSTRG") & !is.na(mRNAs_out$ref_gene_id),]$ref_gene_id
#stringtie_gtf_original <- stringtie_gtf
#lncRNAs_out_original <- lncRNAs_out
#stringtie_gtf <- stringtie_gtf_withrefasgeneid
#lncRNAs_out <- lncRNAs_out_withrefasgeneid
get_novels <- function(lncRNAs_out, stringtie_gtf, lncRNAs_ref){
intersect_feelnc_stringtie <- intersect(lncRNAs_out, stringtie_gtf)
intersect_reflnrna_out <- intersect(lncRNAs_ref$gene_id, lncRNAs_out)
novel_lncrnas = setdiff(intersect_feelnc_stringtie,intersect_reflnrna_out )
return(novel_lncrnas)
}
novels <- list()
novel_lncrnas <- get_novels(lncRNAs_out_gene_ids_withref, stringtie_gene_ids_withref, lncRNAs_ref)
length(unique(novel_lncrnas))
novels <- cbind(novels,"raw" = length(novel_lncrnas ))
# Here we retrieve the ranges
novel_lncrnas_ranges <- lncRNAs_out[lncRNAs_out$gene_id %in% novel_lncrnas]
novel_lncrnas_ranges[str_detect(novel_lncrnas_ranges$gene_id,"MSTRG"),]
grid::grid.newpage()
# Old
intersect_reflnrna_out <- intersect(lncRNAs_ref$gene_id, lncRNAs_out$gene_id)
intersect_reflnrna_stringtie <- intersect(lncRNAs_ref$gene_id, stringtie_gtf$gene_id)
intersect_feelnc_stringtie <- intersect(lncRNAs_out$gene_id, stringtie_gtf$gene_id)
intersect_reflnrna_mrnaout<- intersect(lncRNAs_ref$gene_id, unique(mRNAs_out$gene_id))
correctly_identified = intersect(intersect_reflnrna_stringtie,lncRNAs_out$gene_id)
missed = setdiff(intersect_reflnrna_stringtie,correctly_identified)
intersect_missed_mrnaout<- intersect(missed, unique(mRNAs_out$gene_id))
# new
intersect_reflnrna_out <- intersect(lncRNAs_ref$gene_id, lncRNAs_out_gene_ids_withref)
intersect_reflnrna_stringtie <- intersect(lncRNAs_ref$gene_id, stringtie_gene_ids_withref)
intersect_feelnc_stringtie <- intersect(lncRNAs_out_gene_ids_withref, stringtie_gene_ids_withref)
intersect_reflnrna_mrnaout<- intersect(lncRNAs_ref$gene_id, mRNAs_out_gene_ids_withref)
correctly_identified = intersect(intersect_reflnrna_stringtie,lncRNAs_out_gene_ids_withref)
missed = setdiff(intersect_reflnrna_stringtie,correctly_identified)
intersect_missed_mrnaout<- intersect(missed, mRNAs_out_gene_ids_withref)
candidates = unique(candidates_lncRNA_gene_ids_withref)
#vd_draw(list(missed, candidates,mRNAs_out_gene_ids_withref),c("missed","candidates","predmrna"))
missed_for_unconcordant_prediction <- setdiff(intersect(missed,candidates), mRNAs_out_gene_ids_withref)
#length(intersect(missed_for, stringtie_gtf_original$gene_id))
missed_because_of_filtering <- setdiff(missed,candidates)
length(missed)-length(intersect_missed_mrnaout)
total = intersect_reflnrna_stringtie
df <- data.frame()
df <- rbind(df, data.frame(dataset = "all NOVEL", number = length(novel_lncrnas), type = "Novel"))
#df <- rbind(df, data.frame(dataset = "Total in Reference", number = length(total), type = "lncrna"))
df <- rbind(df, data.frame(dataset = "Correctly identified", number = length(correctly_identified), type = "Known correct"))
df <- rbind(df, data.frame(dataset = "Predicted as Mrna", number = length(intersect_missed_mrnaout), type = "Known missed"))
df <- rbind(df, data.frame(dataset = "Missed for Filter ", number = length(missed_because_of_filtering), type = "Known missed"))
df <- rbind(df, data.frame(dataset = "Missed for unconcordant Prediction ", number = length(missed_for_unconcordant_prediction), type = "Known missed"))
p1 <- ggplot(data=df, aes(x=type, y=number, fill=dataset)) +
geom_bar(stat="identity", position=position_dodge(), width=0.85)+
geom_text(aes(label=number),color="black",
position = position_dodge(0.9), size=3.5)+
scale_fill_brewer(palette="Paired")+
labs(title="lncRNAs Prediction vs Reference") +
ylab("Count") +
xlab("") +
theme(legend.title=element_blank())+
theme(plot.title = element_text(hjust = 0.5))
p1
prop_missed = (length(missed)/length(total))*100
prop_correctly = (length(correctly_identified)/length(total))*100
df <- data.frame()
df <- rbind(df, data.frame(dataset = "missed", number = prop_missed, type = "lncrna"))
df <- rbind(df, data.frame(dataset = "correctly identified", number = prop_correctly, type = "lncrna"))
p2 <- ggplot(data=df, aes(x=type, y=number, fill=dataset)) +
geom_bar(stat="identity")+
geom_text(aes(label=format(round(number, 2), nsmall = 2)), vjust=1.8, color="white", size=3)+
labs(title="Proportion of genes identified as lncRNAs")+
theme(legend.title=element_blank())+
theme(plot.title = element_text(hjust = 0.5))
p2+ coord_flip()
# Instead of collapsing we select the longest transcript among the transcripts in one gene
get_only_max_transcript <- function(gr){
df <- data.frame("gene_id" = gr$gene_id,"transcript_id" = gr$transcript_id, "range_width" = width(ranges(gr)))
#  df <- df[!is.na(df$gene_id), ]
#  df <- df[!is.na(df$transcript_id), ]
gene_with_multiple_isoforms <-df[!duplicated(df$transcript_id),] %>% dplyr::group_by(gene_id) %>% dplyr::summarize(number=dplyr::n()) %>% dplyr::filter(number > 1)
collapsed <-df %>% dplyr::group_by(gene_id,transcript_id) %>% dplyr::summarize("range" = sum(range_width)) %>% dplyr::group_by(gene_id) %>% dplyr::slice(which.max(range))
gene_with_one_isoform <-df[!duplicated(df$transcript_id),] %>% dplyr::group_by(gene_id) %>% dplyr::summarize(number=dplyr::n()) %>% dplyr::filter(number == 1)
gr <- gr[gr$transcript_id %in% collapsed$transcript_id ,]
return(gr)
}
df <- data.frame("gene" =  lncRNAs_out$gene_id, "transcript" = lncRNAs_out$transcript_id, stringsAsFactors = FALSE)
a <-df[!duplicated(df$transcript),] %>% dplyr::group_by(gene) %>% dplyr::summarize(number=dplyr::n()) %>% dplyr::filter(number > 1)
df[df$gene == "ENSMMUG00000037508",]
gr <- lncRNAs_out
df <- data.frame("gene_id" = gr$gene_id,"transcript_id" = gr$transcript_id, "range_width" = width(ranges(gr)))
gene_with_multiple_isoforms <-df[!duplicated(df$transcript_id),] %>% dplyr::group_by(gene_id) %>% dplyr::summarize(number=dplyr::n()) %>% dplyr::filter(number > 1)
collapsed <-df %>% dplyr::group_by(gene_id,transcript_id) %>% dplyr::summarize("range" = sum(range_width)) %>% dplyr::group_by(gene_id) %>% dplyr::slice(which.max(range))
gr <- gr[gr$transcript_id %in% collapsed$transcript_id ,]
lncRNAs_out <- gr
#return(gr)
grid::grid.newpage()
#lncRNAs_out <- get_only_max_transcript(lncRNAs_out)
#mRNAs_out <-  get_only_max_transcript(mRNAs_out)
colors <- c("#D16103","red","#4E84C4" )
get_nr_exons <- function(gr){
gr <- get_only_max_transcript(gr)
df <- data.frame("gene_id" = gr$gene_id,"exon_number" = as.numeric(gr$exon_number))
number_exons <- df %>% dplyr::group_by(gene_id) %>%dplyr::summarize(max_exon = max(exon_number))
return(number_exons)
}
lncrnas_ref_exons <- lncRNAs_ref[lncRNAs_ref$type =="exon",]
#lncrnas_ref_collapsed <- get_only_max_transcript(lncrnas_ref_exons)
length(novel_lncrnas_ranges$gene_id)
df_l <- data.frame(get_nr_exons(novel_lncrnas_ranges))
nrow(df_l)
df_l$type <- "Novel"
df_ref_lncrnas <- get_nr_exons(lncrnas_ref_exons)
df_ref_lncrnas$type <- "Reference-macaque"
df <- rbind(df_ref_lncrnas, df_l)
df_ref_human_lncrnas_exons <- lncRNAs_ref_human[lncRNAs_ref_human$type =="exon",]
df_ref_human_lncrnas <- get_nr_exons(df_ref_human_lncrnas_exons)
df_ref_human_lncrnas$type <- "Reference-human "
df <- rbind(df_ref_human_lncrnas, df)
p1 <- ggplot(df, aes(x=max_exon, fill=type)) +
geom_histogram(position="identity", alpha=0.7, binwidth =1)+
xlim(1,15)+
theme(legend.title=element_blank())+
theme(plot.title = element_text(hjust = 0.5))+
xlab("Number of exons")+
ylab("Count")+
labs(title="Number of Exons")
p1 <- p1 + scale_fill_manual(values=colors)
p1
p2 <- ggplot(df, aes(x=max_exon, fill=type)) +
geom_histogram(aes(y=c(..count..[..group..==1]/sum(..count..[..group..==1]),
..count..[..group..==2]/sum(..count..[..group..==2]),
..count..[..group..==3]/sum(..count..[..group..==3]))*100),position="identity", alpha=0.5,binwidth = 1)+
labs(title="% Number of exons ")+ ylab ("Percentage of #exons")+
theme(legend.title=element_blank())+
theme(plot.title = element_text(hjust = 0.5))+
xlab("Number of exons")+
xlim(1,15)
p2 <- p2 + scale_fill_manual(values=colors)
p2
grid.arrange(p1,p2,nrow=1)
df_m <- data.frame(get_nr_exons(mRNAs_out))
df_m$type <- "ref-mrna"
df_m <- rbind(df, df_m)
p3 <- ggplot(df_m, aes(x=max_exon,col =type, fill=type)) +
geom_histogram(aes(y=c(..count..[..group..==1]/sum(..count..[..group..==1]),
..count..[..group..==2]/sum(..count..[..group..==2]),
..count..[..group..==3]/sum(..count..[..group..==3]))*100),position="identity", alpha=0.5,binwidth = 1)+
labs(title="Number of exons Novel vs REF ")+ ylab ("Percentage of #exons")
# Double check
df_m$type <- "mrnas"
df <- data.frame("gene" =  mRNAs_out$gene_id, "transcript" = mRNAs_out$transcript_id, stringsAsFactors = FALSE)
df[!duplicated(df$transcript),] %>% dplyr::group_by(gene) %>% dplyr::summarize(number=dplyr::n()) %>% dplyr::filter(number > 1)
# same for reference
df <- data.frame("gene" =  lncrnas_ref_collapsed$gene_id, "transcript" = lncrnas_ref_collapsed$transcript_id, stringsAsFactors = FALSE)
# same for reference
df <- data.frame("gene" =  lncrnas_ref_collapsed$gene_id, "transcript" = lncrnas_ref_collapsed$transcript_id, stringsAsFactors = FALSE)
# Only take exons
lncrnas_ref_exons <- lncRNAs_ref[lncRNAs_ref$type =="exon",]
lncrnas_ref_collapsed <- get_only_max_transcript(lncrnas_ref_exons)
lncrnas_ref_collapsed_human <- get_only_max_transcript(df_ref_human_lncrnas_exons)
lncrnas_ref_collapsed_human <- get_only_max_transcript(df_ref_human_lncrnas_exons)
novel_lncrnas_ranges <- get_only_max_transcript(novel_lncrnas_ranges)
# same for reference
df <- data.frame("gene" =  lncrnas_ref_collapsed$gene_id, "transcript" = lncrnas_ref_collapsed$transcript_id, stringsAsFactors = FALSE)
df[!duplicated(df$transcript),] %>% dplyr::group_by(gene) %>% dplyr::summarize(number=dplyr::n()) %>% dplyr::filter(number > 1)
lncrnas_ref_collapsed[lncrnas_ref_collapsed$gene_id == "ENSMMUG00000000801",]
# Define function for plotting
colors <- c("#D16103","#4E84C4","red")
histo_length <- function(gr,title,color){
df <- data.frame("gene_id" = gr$gene_id,"transcript_id" = gr$transcript_id, "range_width" = width(ranges(gr)))
collapsed <-df%>% dplyr::group_by(gene_id,transcript_id) %>% dplyr::summarize("range" = sum(range_width))
p1 <- ggplot(collapsed, aes(x=range)) + geom_histogram(position="identity", alpha=0.5, fill = color, binwidth = 100)+labs(title=title) + scale_y_log10()+
ylab("Log10 Count") + xlab("#Bases")+  theme(legend.title=element_blank())+
theme(plot.title = element_text(hjust = 0.5))+xlim(0,20000)
return(p1)
}
plot_all <- function(ref, gr, colors){
df <- data.frame("gene_id" = gr$gene_id,"transcript_id" = gr$transcript_id, "range_width" = width(ranges(gr)))
collapsed <-df%>% dplyr::group_by(gene_id,transcript_id) %>% dplyr::summarize("range" = sum(range_width))
collapsed$type <- "novel"
df_ref <- data.frame("gene_id" = ref$gene_id,"transcript_id" = ref$transcript_id, "range_width" = width(ranges(ref)))
collapsed_ref <-df_ref%>% dplyr::group_by(gene_id,transcript_id) %>% dplyr::summarize("range" = sum(range_width))
collapsed_ref$type <- "ref"
all <- rbind(data.frame(collapsed_ref),data.frame(collapsed))
mu <- ddply(all, "type", summarise, grp.mean=mean(range))
print(mu[mu$type == "novel",]$grp.mean)
p3 <- ggplot(all, aes(x=range, col= type))  +
geom_histogram(position="identity",alpha=0.5, binwidth = 50) +
geom_vline(data=mu, aes(xintercept=grp.mean, color=type),
linetype="dashed")+
geom_text(aes(x = (mu[mu$type == "novel",]$grp.mean)+ 5000, y = 120, label = as.integer(mu[mu$type == "novel",]$grp.mean))) +
geom_text(aes(x = (mu[mu$type == "ref",]$grp.mean)+ 5000, y = 340, label = as.integer(mu[mu$type == "ref",]$grp.mean)), colour = colors[2]) +
labs(title="Length distribution NOVEL vs REFERENCE")+
theme(legend.title=element_blank())+
theme(plot.title = element_text(hjust = 0.5))+xlim(0,20000)+ ylab("Log10 Count") + xlab("#Bases")
p3 <- p3 + scale_color_manual(values=colors)
return(p3)
}
plot_all_all <- function(ref, gr, gr1, colors){
df <- data.frame("gene_id" = gr$gene_id,"transcript_id" = gr$transcript_id, "range_width" = width(ranges(gr)))
collapsed <-df%>% dplyr::group_by(gene_id,transcript_id) %>% dplyr::summarize("range" = sum(range_width))
collapsed$type <- "novel"
df_human <- data.frame("gene_id" = gr1$gene_id,"transcript_id" = gr1$transcript_id, "range_width" = width(ranges(gr1)))
collapsed_human <-df_human%>% dplyr::group_by(gene_id,transcript_id) %>% dplyr::summarize("range" = sum(range_width))
collapsed_human$type <- "humanref"
df_ref <- data.frame("gene_id" = ref$gene_id,"transcript_id" = ref$transcript_id, "range_width" = width(ranges(ref)))
collapsed_ref <-df_ref%>% dplyr::group_by(gene_id,transcript_id) %>% dplyr::summarize("range" = sum(range_width))
collapsed_ref$type <- "refmacaque"
all <- rbind(data.frame(collapsed),data.frame(collapsed_ref),data.frame(collapsed_human))
mu <- ddply(all, "type", summarise, grp.mean=mean(range))
p3 <- ggplot(all, aes(x=range, col= type))  +
geom_histogram(position="identity",alpha=0.5, binwidth = 50) +
geom_vline(data=mu, aes(xintercept=grp.mean, color=type),
linetype="dashed")+
geom_text(aes(x = (mu[mu$type == "novel",]$grp.mean)+ 1000, y = 340, label = as.integer(mu[mu$type == "novel",]$grp.mean)), colour = colors[2]) +
geom_text(aes(x = (mu[mu$type == "refmacaque",]$grp.mean)+ 1000, y = 740, label = as.integer(mu[mu$type == "refmacaque",]$grp.mean)), colour = colors[3]) +
geom_text(aes(x = (mu[mu$type == "humanref",]$grp.mean)+ 1000, y = 540, label = as.integer(mu[mu$type == "humanref",]$grp.mean)), colour = colors[1]) +
labs(title="Length distribution NOVEL vs REFERENCE")+
theme(legend.title=element_blank())+
theme(plot.title = element_text(hjust = 0.5))+xlim(0,20000)+ ylab("Log10 Count") + xlab("#Bases")
p3 <- p3 + scale_color_manual(values=colors)
return(p3)
}
get_nr_exons <- function(gr){
df <- data.frame("gene_id" = gr$gene_id,"exon_number" = as.numeric(gr$exon_number))
number_exons <- df %>% dplyr::group_by(gene_id) %>%dplyr::summarize(max_exon = max(exon_number))
return(number_exons)
}
# Only take exons
lncrnas_ref_exons <- lncRNAs_ref[lncRNAs_ref$type =="exon",]
lncrnas_ref_collapsed <- get_only_max_transcript(lncrnas_ref_exons)
lncrnas_ref_collapsed_human <- get_only_max_transcript(df_ref_human_lncrnas_exons)
novel_lncrnas_ranges <- get_only_max_transcript(novel_lncrnas_ranges)
p1 <-histo_length(novel_lncrnas_ranges," NOVEL",colors[1])
p2 <-histo_length(lncrnas_ref_collapsed," REF MACAQUE",colors[2])
p4 <-histo_length(lncrnas_ref_collapsed_human,"REF HUMAN","red")
colors <- c("red","#D16103","#4E84C4")
#p3 <- plot_all(lncrnas_ref_collapsed,novel_lncrnas_ranges,colors)
p3 <- plot_all_all(lncrnas_ref_collapsed,novel_lncrnas_ranges,lncrnas_ref_collapsed_human,colors)
p3
# plot ALL
g1 <- as.grob(p1)
g2 <- as.grob(p2)
g3 <- as.grob(p3)
g4 <- as.grob(p4)
grid.arrange(
grobs = list(g1,g2,g3,g4),
layout_matrix = rbind(c(1,2,4),
c(3,3,3))
)
#gr <- novel_lncrnas_ranges
df <- data.frame("gene_id" = gr$gene_id,"transcript_id" = gr$transcript_id, "range_width" = width(ranges(gr)))
collapsed <-df%>% dplyr::group_by(gene_id,transcript_id) %>% dplyr::summarize("range" = sum(range_width))
max(collapsed$range)
collapsed[collapsed$range == 81247,]
boxplot_logcpms <- function(dge,title, outline= TRUE){
logcounts <- cpm(dge,log=TRUE)
# Check distributions of samples using boxplots
colors <- brewer.pal(n = length(levels(dge$samples$group)), name = 'Paired')
col.cell <- colors[dge$samples$group]
colnames(logcounts) <- dge$samples$group
boxplot(logcounts, xlab="", ylab="Log2 counts per million"
,las=2,
col = col.cell, outline = outline
)
# Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(logcounts),col="blue")
title(title)
}
directory_zyagen = file.path(baseDir,"data/02_RNA-Seq/06_quantification_stringtie_prepde")
count_matrix<- iterate_files(directory_zyagen, 'gene_count_matrix.csv')
# Load gene(/transcript) count matrix and labels
countData <- as.matrix(read.csv(count_matrix, row.names="gene_id"))
colData <- get_colData(countData)
all(rownames(colData) %in% colnames(countData))
countData <- countData[, rownames(colData)]
all(rownames(colData) == colnames(countData))
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~tissue)
#dds <- DESeq(dds)
filter_and_plotMDS <- function(dds,dge,title){
# Filter lowly expressed genes
assays(dds)$logCPM <- cpm(dge, log = TRUE)
mask <- rowMeans(assays(dds)$logCPM) > 1
dds <- dds[mask, ]
dge <- dge[mask, ]
print(length(levels(dge$samples$group)))
colors <- brewer.pal(n = length(levels(dge$samples$group)), name = 'Paired')
mds <- plotMDS(cpm(dge, log = TRUE), label= dge$samples$group , col=colors[dge$samples$group],main=title)
par(xpd=T, mar=par()$mar+c(0,0,0,6))
mds <- plotMDS(cpm(dge, log = TRUE), pch = 20, col=colors[dge$samples$group],main=title)
legend(3.3,1.4, legend=unique(dge$samples$group), fill=unique(colors[dge$samples$group]))
par(mar=c(5, 4, 4, 2) + 0.1)
}
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~tissue)
dge <- DGEList(counts = assays(dds)$counts, group = dds$tissue, genes = rownames(dds))
boxplot_logcpms(dge,"Zyagen - all ")
assays(dds)$logCPM <- cpm(dge, log = TRUE)
mask <- rowMeans(assays(dds)$logCPM) > 1
table(mask)
boxplot_logcpms(dge,"Zyagen - all - before filter ")
# The correctly identified are all very highly expressed!
#length(unique(correctly_identified))
#correctly_identified_dds <- dds[rownames(dds) %in% correctly_identified,]
#correctly_identified_dge <- DGEList(counts = assays(correctly_identified_dds)$counts, group = correctly_identified_dds$tissue, genes = rownames(correctly_identified_dds))
#assays(correctly_identified_dds)$logCPM <- cpm(correctly_identified_dge, log = TRUE)
#mask <- rowMeans(assays(correctly_identified_dds)$logCPM) > 1
#table(mask)
#min(assays(correctly_identified_dds)$logCPM )
dds <- dds[mask, ]
dge <- dge[mask, ]
filter_and_plotMDS(dds,dge,"Zyagen - All")
boxplot_logcpms(dge,"Zyagen - all - after filter ")
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~tissue)
dge <- DGEList(counts = assays(dds)$counts, group = dds$tissue, genes = rownames(dds))
assays(dds)$logCPM <- cpm(dge, log = TRUE)
mask <- rowMeans(assays(dds)$logCPM) > 1
table(mask)
boxplot_logcpms(dge,"Zyagen - all - before filter ")
# The correctly identified are all very highly expressed!
#length(unique(correctly_identified))
#correctly_identified_dds <- dds[rownames(dds) %in% correctly_identified,]
#correctly_identified_dge <- DGEList(counts = assays(correctly_identified_dds)$counts, group = correctly_identified_dds$tissue, genes = rownames(correctly_identified_dds))
#assays(correctly_identified_dds)$logCPM <- cpm(correctly_identified_dge, log = TRUE)
#mask <- rowMeans(assays(correctly_identified_dds)$logCPM) > 1
#table(mask)
#min(assays(correctly_identified_dds)$logCPM )
dds <- dds[mask, ]
dge <- dge[mask, ]
filter_and_plotMDS(dds,dge,"Zyagen - All")
boxplot_logcpms(dge,"Zyagen - all - after filter ")
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~tissue)
dge <- DGEList(counts = assays(dds)$counts, group = dds$tissue, genes = rownames(dds))
# The correctly identified are all very highly expressed!
length(unique(correctly_identified))
correctly_identified_dds <- dds[rownames(dds) %in% correctly_identified,]
correctly_identified_dge <- DGEList(counts = assays(correctly_identified_dds)$counts, group = correctly_identified_dds$tissue, genes = rownames(correctly_identified_dds))
boxplot_logcpms(correctly_identified_dge,"Zyagen - correctly identified ", FALSE)
rownames(correctly_identified_dge)
assays(correctly_identified_dds)$logCPM <- cpm(correctly_identified_dge, log = TRUE)
mask <- rowMeans(assays(correctly_identified_dds)$logCPM) > 1
table(mask)
min(assays(correctly_identified_dds)$logCPM )
dds <- dds[mask, ]
dge <- dge[mask, ]
filter_and_plotMDS(dds,dge,"Zyagen - All")
# The correctly identified are all very highly expressed!
length(unique(correctly_identified))
rownames(dds)
length(rownames(dds))
length(rownames(correctly_identified_dds))
# The correctly identified are all very highly expressed!
length(unique(correctly_identified))
length(rownames(correctly_identified_dds))
correctly_identified
rownames(dds)
rowData(dds)$
correctly_identified_dds <- dds[rownames(dds) %in% correctly_identified,]
rowData(dds)
rowData(dds)
dds$sample
a <- assays(dds)
a$counts
# The correctly identified are all very highly expressed!
#length(unique(correctly_identified))
#correctly_identified_dds <- dds[rownames(dds) %in% correctly_identified,]
#correctly_identified_dge <- DGEList(counts = assays(correctly_identified_dds)$counts, group = correctly_identified_dds$tissue, genes = rownames(correctly_identified_dds))
#assays(correctly_identified_dds)$logCPM <- cpm(correctly_identified_dge, log = TRUE)
#mask <- rowMeans(assays(correctly_identified_dds)$logCPM) > 1
#table(mask)
#min(assays(correctly_identified_dds)$logCPM )
dge$samples$group
# The correctly identified are all very highly expressed!
#length(unique(correctly_identified))
#correctly_identified_dds <- dds[rownames(dds) %in% correctly_identified,]
#correctly_identified_dge <- DGEList(counts = assays(correctly_identified_dds)$counts, group = correctly_identified_dds$tissue, genes = rownames(correctly_identified_dds))
#assays(correctly_identified_dds)$logCPM <- cpm(correctly_identified_dge, log = TRUE)
#mask <- rowMeans(assays(correctly_identified_dds)$logCPM) > 1
#table(mask)
#min(assays(correctly_identified_dds)$logCPM )
dge$genes
# The correctly identified are all very highly expressed!
#length(unique(correctly_identified))
#correctly_identified_dds <- dds[rownames(dds) %in% correctly_identified,]
#correctly_identified_dge <- DGEList(counts = assays(correctly_identified_dds)$counts, group = correctly_identified_dds$tissue, genes = rownames(correctly_identified_dds))
#assays(correctly_identified_dds)$logCPM <- cpm(correctly_identified_dge, log = TRUE)
#mask <- rowMeans(assays(correctly_identified_dds)$logCPM) > 1
#table(mask)
#min(assays(correctly_identified_dds)$logCPM )
dge$counts
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~tissue)
dge <- DGEList(counts = assays(dds)$counts, group = dds$tissue, genes = rownames(dds))
assays(dds)$logCPM <- cpm(dge, log = TRUE)
mask <- rowMeans(assays(dds)$logCPM) > 1
table(mask)
boxplot_logcpms(dge,"Zyagen - all - before filter ")
# The correctly identified are all very highly expressed!
#length(unique(correctly_identified))
#correctly_identified_dds <- dds[rownames(dds) %in% correctly_identified,]
#correctly_identified_dge <- DGEList(counts = assays(correctly_identified_dds)$counts, group = correctly_identified_dds$tissue, genes = rownames(correctly_identified_dds))
#assays(correctly_identified_dds)$logCPM <- cpm(correctly_identified_dge, log = TRUE)
#mask <- rowMeans(assays(correctly_identified_dds)$logCPM) > 1
#table(mask)
#min(assays(correctly_identified_dds)$logCPM )
dds <- dds[mask, ]
dge <- dge[mask, ]
filter_and_plotMDS(dds,dge,"Zyagen - All")
boxplot_logcpms(dge,"Zyagen - all - after filter ")
# The correctly identified are all very highly expressed!
# correctly_identified = intersect(intersect_reflnrna_stringtie,lncRNAs_out_gene_ids_withref)
correctly_identified_test = intersect(intersect_reflnrna_stringtie,lncRNAs_out$gene_id)
length(unique(correctly_identified))
length(unique(correctly_identified_test))
# The correctly identified are all very highly expressed!
# correctly_identified = intersect(intersect_reflnrna_stringtie,lncRNAs_out_gene_ids_withref)
correctly_identified_test = intersect(intersect_reflnrna_stringtie,lncRNAs_out_gene_ids_withref)
length(unique(correctly_identified_test))
stringtie_gtf$gene_id
stringtie_gtf[str_detect(stringtie_gtf$gene_id,"MSTRG") &!is.na(stringtie_gtf$ref_gene_id),]$ref_gene_id)
stringtie_gtf[str_detect(stringtie_gtf$gene_id,"MSTRG") &!is.na(stringtie_gtf$ref_gene_id),]$ref_gene_id
str_detect(stringtie_gtf$gene_id,"MSTRG") &!is.na(stringtie_gtf$ref_gene_id)
stringtie_gtf[stringtie_gtf$gene_id == rownames(dds),]
rowData(dds)$ref_id <- if(str_detect(rownames(dds),"MSTRG") &!is.na(stringtie_gtf[stringtie_gtf$gene_id == rownames(dds),]$ref_gene_id)) stringtie_gtf$ref_gene_id else stringtie_gtf$gene_id
rowData(dds)$ref_id <- if(str_detect(rownames(dds),"MSTRG") &!is.na(stringtie_gtf[stringtie_gtf$gene_id == rownames(dds),]$ref_gene_id)) stringtie_gtf[stringtie_gtf$gene_id == rownames(dds),]$ref_gene_id else stringtie_gtf[stringtie_gtf$gene_id == rownames(dds),]$gene_id
rowData(dds)$ref_id <- if(str_detect(rownames(dds),"MSTRG") &!is.na(stringtie_gtf[stringtie_gtf$gene_id == rownames(dds),]$ref_gene_id)) stringtie_gtf[stringtie_gtf$gene_id == rownames(dds),]$ref_gene_id else stringtie_gtf[stringtie_gtf$gene_id == rownames(dds),]$gene_id
rowData(dds)$ref_id
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~tissue)
dge <- DGEList(counts = assays(dds)$counts, group = dds$tissue, genes = rownames(dds))
rowData(dds)$ref_id <- if(str_detect(rownames(dds),"MSTRG") &!is.na(stringtie_gtf[stringtie_gtf$gene_id == rownames(dds),]$ref_gene_id)) stringtie_gtf[stringtie_gtf$gene_id == rownames(dds),]$ref_gene_id else stringtie_gtf[stringtie_gtf$gene_id == rownames(dds),]$gene_id
stringtie_gtf[stringtie_gtf$gene_id == rownames(dds)
stringtie_gtf[stringtie_gtf$gene_id == rownames(dds)]
stringtie_gtf[stringtie_gtf$gene_id == rownames(dds),]
rownames(dds)
str_detect(rownames(dds),"MSTRG")
is.na(stringtie_gtf[stringtie_gtf$gene_id == rownames(dds)
stringtie_gtf[stringtie_gtf$gene_id == rownames(dds),]
is.na(stringtie_gtf[stringtie_gtf$gene_id == rownames(dds),]$ref_gene_id)
is.na(stringtie_gtf[stringtie_gtf$gene_id == rownames(dds),]$ref_gene_id)
stringtie_gtf[stringtie_gtf$gene_id == rownames(dds),]
rownames(dds)
intersect(rownames(dds), stringtie_gtf$gene_id)
length(intersect(rownames(dds), stringtie_gtf$gene_id))
rownames(dds)
rowData(dds)$ref_id <- if(str_detect(rownames(dds),"MSTRG") &!is.na(stringtie_gtf[stringtie_gtf$gene_id == rownames(dds),]$ref_gene_id)) stringtie_gtf[stringtie_gtf$gene_id == rownames(dds),]$ref_gene_id else rownames(dds)
rowData(dds)$ref_id <- rownames(dds)
str_detect(rownames(dds),"MSTRG")
stringtie_gtf$gene_id == rowData(dds)$ref_id
for( id in rowData(dds)$ref_id){
print(id)
}
for( id in rowData(dds)$ref_id){
if(str_detect(rownames(dds),"MSTRG") &!is.na(stringtie_gtf[stringtie_gtf$gene_id == id,]$ref_gene_id)){
print(id)
}
}
for( id in rowData(dds)$ref_id){
if(str_detect(id,"MSTRG") &!is.na(stringtie_gtf[stringtie_gtf$gene_id == id,]$ref_gene_id)){
print(id)
}
}
rowData(dds)$ref_id <- rownames(dds)
for( id in rowData(dds)$ref_id){
if(str_detect(id,"MSTRG") &!is.na(stringtie_gtf[stringtie_gtf$gene_id == id,]$ref_gene_id)){
print(id)
}
}
for( id in rowData(dds)$ref_id){
if(str_detect(id,"MSTRG") &!is.na(stringtie_gtf[stringtie_gtf$gene_id == id,]$ref_gene_id)){
print(id)
}
}
dds <- DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~tissue)
dge <- DGEList(counts = assays(dds)$counts, group = dds$tissue, genes = rownames(dds))
# The correctly identified are all very highly expressed!
# correctly_identified = intersect(intersect_reflnrna_stringtie,lncRNAs_out_gene_ids_withref)
# Problem : should we add gene ids (known) if they are in ref?
correctly_identified_test = intersect(intersect_reflnrna_stringtie,lncRNAs_out_gene_ids_withref)
length(unique(correctly_identified_test))
a <- assays(dds)
get_geneids_refids_correspondence <- function(gr){
gr_ref_ids <- unique(gr[str_detect(gr$gene_id,"MSTRG") &
!is.na(gr$ref_gene_id),]$ref_gene_id)
return(unique(union(gr_ref_ids, gr$gene_id)))
}
stringtie_gtf$gene_id
stringtie_gtf[str_detect(stringtie_gtf$gene_id,"MSTRG") &!is.na(stringtie_gtf$ref_gene_id),]$ref_gene_id
rowData(dds)$ref_id <- rownames(dds)
for( id in rowData(dds)$ref_id){
if(str_detect(id,"MSTRG") &!is.na(stringtie_gtf[stringtie_gtf$gene_id == id,]$ref_gene_id)){
print(id)
}
}
